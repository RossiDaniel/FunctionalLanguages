data Move = North | South | East | West
            deriving Show

type Pos = (Int , Int)
        
move :: Move -> Pos -> Pos
move North (x,y) = (x,y+1)
move South (x,y) = (x, y-1)
move East (x,y) = (x+1,y)
move West (x,y) = (x-1,y)

mov :: [Move]
mov = [West,North,East,East,East,East,East,East,East,North]

moves [] p = p
moves (x:xs) p = moves xs (move x p)

moves' :: [Move] -> Pos -> Pos
moves' xs p = foldl (\a b -> move b a) p xs

sum' p xs = foldr' (+) 0 xs

foldr' p v [] = v
foldr' p v (x:xs) = p x (foldr' p v xs) 

foldl' p v [] = v
foldl' p v (x:xs) = foldl' p (p v x) xs

moves2 :: [Move] -> Pos -> Pos
moves2 = foldr (\ a b -> (\x -> b (move a x) )) id

ciao = (\ a b -> (\x -> b (move a x) ))

data Shape = Circle Float | Rect Float Float
data Ciao = Hello | Ciaone 

square :: Float -> Shape
square n = Rect n n

triplo :: (a->a) -> a -> a
triplo f = f.f.f

map' :: (a->b) -> [a] -> [b]
map' f xs = [f x | x <- xs]

map'' :: (a->b) -> [a] -> [b]
map'' _ [] = []
map'' f (x:xs) = (f x): (map'' f xs)

filter' :: (a->Bool) -> [a] -> [a]
filter' _ [] = []
filter' f (x:xs) | (f x) == True = x:filter' f xs
                 | otherwise     = filter' f xs

filter'' :: (a->Bool) -> [a] -> [a]
filter'' f xs = [x | x<- xs, f x]

foldr' :: (a-> b-> b) -> b -> [a] -> b
foldr' _ v [] = v
foldr' f v (x:xs) = f x (foldr' f v xs)

length' :: [a] -> Int
length' xs = foldr' (\x y -> y+1) 0 xs

reverse' :: [a] -> [a]
reverse' xs = foldr' (\ w z -> z ++ [w])  [] xs

foldl' :: (a -> b -> a) -> a -> [b] -> a
foldl' _ v [] = v
foldl' f v (x:xs) = foldl' f (f v x) xs

--composition

(.) :: (a -> b) -> (c -> a) -> (c -> b)
f . g = \x -> f (g x)


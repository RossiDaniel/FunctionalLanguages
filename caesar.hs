import Data.Char

let2int:: Char ->Int
let2int c = ord c - ord 'a'

int2let:: Int -> Char
int2let n = chr (ord 'a' + n)

shift :: Int -> Char -> Char
shift n c | isLower c = int2let ((let2int c + n) `mod` 26)
          | otherwise = c

encode :: Int -> String -> String
encode n xs = [shift n x | x <- xs]

freq = [('a', 10.85), ('b', 1.05), ('c', 4.3), ('d', 3.39), ('e', 11.49), ('f', 1.01), ('g', 1.65), ('h', 1.43), ('i', 10.18), ('l', 5.7), ('m', 2.87), ('n', 7.02), ('o', 9.97), ('p', 2.96), ('q', 0.45), ('r', 6.19), ('s', 5.48), ('t', 6.97), ('u', 3.16), ('v', 1.75), ('z', 0.85)]
alpha = ['a'..'z']

foo a b = ( (fromIntegral a) / (fromIntegral b) ) * 100

currentfreq xs= [foo (sum [1|x<-xs , x == y]) (sum [1|x<-xs]) | y <- alpha]

-- [9.58904109589041e-2,0.0,2.73972602739726e-2,2.28310502283105e-2,6.84931506849315e-2,1.82648401826484e-2,9.1324200913242e-3,1.36986301369863e-2,0.1095890410958904,0.0,0.0,2.28310502283105e-2,2.73972602739726e-2,4.10958904109589e-2,7.30593607305936e-2,2.28310502283105e-2,0.0,7.30593607305936e-2,4.5662100456621e-2,8.67579908675799e-2,3.65296803652968e-2,1.82648401826484e-2,0.0,0.0,0.0,4.5662100456621e-3]